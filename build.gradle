plugins {
	id "fabric-loom" version "0.10-SNAPSHOT"
	id "org.jetbrains.kotlin.jvm" version "1.6.10"
	id "com.github.johnrengelman.shadow" version "7.1.1"
}

sourceCompatibility = targetCompatibility = project.java_version as int

archivesBaseName = project.archivesBaseName
version = project.version
group = project.group

loom {
 	accessWidenerPath = file("src/main/resources/transrights.accesswidener")
}

repositories {
	jcenter()

	maven {
		name = 'jitpack'
		url = 'https://jitpack.io'
	}
}

dependencies {
	Set<String> apiModules = [
		"fabric-api-base",
		"fabric-resource-loader-v0"
	]

	Set<String> libraries = [
		"com.github.ZeroMemes:Alpine:${project.alpine_version}"
	]

	// fabric dependencies
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// api dependencies
	apiModules.forEach {
		include(modImplementation(fabricApi.module(it, "${project.fabric_version}")))
	}

	// TR dependencies
	libraries.forEach {
		shadow(implementation(it))
	}
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { 
			"${it}-${project.archivesBaseName}" 
		}
	}

	manifest {
		attributes("Main-Class" : "me.austin.queer.Main")
	}
}

shadowJar {
	configurations = [ project.configurations.shadow ]
}

remapJar {
	dependsOn shadowJar
	input.set(shadowJar.archiveFile)
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release.set(project.java_version as int)
}

compileKotlin {
	kotlinOptions {
        jvmTarget = project.java_version as String
    }
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}
