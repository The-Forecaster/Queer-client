plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version project.mod_version
group project.mod_group

loom.accessWidenerPath = file('src/main/resources/transrights.accesswidener')

compileKotlin.kotlinOptions.jvmTarget = compileTestKotlin.kotlinOptions.jvmTarget = '17'

tasks.withType(JavaCompile).configureEach {
    it.options.release.set(17)
    it.options.encoding = 'UTF-8'
}

java {
    withSourcesJar()

    withJavadocJar()
}

repositories {
    mavenCentral()
}

dependencies {
    var apiModules = [
            'fabric-command-api-v1',
            'fabric-renderer-indigo'
    ]

    // fabric dependencies
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings "net.fabricmc:yarn:$minecraft_version+$yarn_mappings:v2"
    modImplementation 'net.fabricmc:fabric-loader:0.13.3'

    // mod dependencies
    include modImplementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1') {
        exclude module: 'kotlin-stdlib-jdk8'
        exclude module: 'kotlin-stdlib-common'
    }

    include modImplementation('org.jetbrains.kotlin:kotlin-reflect:1.6.21') {
        exclude module: 'kotlin-stdlib'
    }

    include modImplementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21') {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    apiModules.forEach {
        modCompileOnly(fabricApi.module(it, "0.51.1+$minecraft_version")) { transitive = false }
    }

    compileOnly 'org.jetbrains:annotations:23.0.0'
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand 'version': project.mod_version
    }
}

jar {
    from('LICENSE').rename {
        "${it}_$archivesBaseName"
    }

    manifest.attributes('Main-Class': 'trans.rights.Main')
}
