buildscript {
    ext.kotlin_version = '1.8.10'

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'org.jetbrains.kotlin.jvm' version '1.8.10'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version project.mod_version
group project.mod_group

repositories {
    mavenCentral()
}

dependencies {
    // fabric dependencies
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings "net.fabricmc:yarn:$minecraft_version+build.1:v2"
    modImplementation 'net.fabricmc:fabric-loader:0.14.11'

    // mod dependencies
    include modImplementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4') {
        exclude module: 'kotlin-stdlib-jdk8'
        exclude module: 'kotlin-stdlib-common'
    }

    include modImplementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version") {
        exclude module: 'kotlin-stdlib'
    }

    include modImplementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    include modImplementation(fabricApi.module('fabric-command-api-v2', '0.68.1+1.19.3'))
}

loom {
    accessWidenerPath = file('src/main/resources/slug.accesswidener')
}

compileKotlin{
    kotlinOptions {
        jvmTarget = '17'
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release.set 17
    it.options.encoding 'UTF-8'
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft_version

    duplicatesStrategy DuplicatesStrategy.WARN

    from(sourceSets.main.resources.srcDirs) {
        include 'fabric.mod.json'
        expand 'version': project.version, 'mcversion': project.minecraft_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'fabric.mod.json'
    }
}

jar {
    from('LICENSE')

    manifest.attributes('Main-Class': 'me.austin.Main')
}

java {
    withSourcesJar()
}
